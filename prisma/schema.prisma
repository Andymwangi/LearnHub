generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(STUDENT)
  bio             String?   @db.Text
  avatarUrl       String?   @db.Text
  stripeCustomerId String?  @unique
  accounts        Account[]
  courses         Course[]
  purchases       Purchase[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  purchases   Purchase[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([categoryId])
  @@index([userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  courses     Course[]
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PaymentRecord {
  id            String   @id @default(uuid())
  userId        String
  courseId      String
  provider      String   // "stripe", "paypal", etc.
  amount        Float
  currency      String
  transactionId String?  @unique
  status        String   // "completed", "failed", "pending", etc.
  metadata      Json?    // Extra information about the payment
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([courseId])
  @@index([provider])
  @@index([status])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
} 